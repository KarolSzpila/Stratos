/*
 * fm_radio.c
 *
 *  Created on: 01.09.2017
 *      Author: Karol
 */

#include "fm_radio.h"
#include "stm32f4xx_hal.h"
#include "string.h"
#include <stdint.h>
#include <math.h>

#define SIZE 1024
static struct FMRadio self;

unsigned char usbbuf[SIZE];
uint16_t magnitude[SIZE];
uint16_t maglut[129*129*2];

static int r = -1;

void decodeModesMessage(struct modesMessage *mm, unsigned char *msg) {
    uint32_t crc2;   /* Computed CRC, used to verify the message CRC. */
    char *ais_charset = "?ABCDEFGHIJKLMNOPQRSTUVWXYZ????? ???????????????0123456789??????";

    /* Work on our local copy */
    memcpy(mm->msg,msg,MODES_LONG_MSG_BYTES);
    msg = mm->msg;

    /* Get the message type ASAP as other operations depend on this */
    mm->msgtype = msg[0]>>3;    /* Downlink Format */
    mm->msgbits = modesMessageLenByType(mm->msgtype);

    /* CRC is always the last three bytes. */
    mm->crc = ((uint32_t)msg[(mm->msgbits/8)-3] << 16) |
              ((uint32_t)msg[(mm->msgbits/8)-2] << 8) |
               (uint32_t)msg[(mm->msgbits/8)-1];
    crc2 = modesChecksum(msg,mm->msgbits);

    /* Check CRC and fix single bit errors using the CRC when
     * possible (DF 11 and 17). */
    mm->errorbit = -1;  /* No error */
    mm->crcok = (mm->crc == crc2);

    if (!mm->crcok && Modes.fix_errors &&
        (mm->msgtype == 11 || mm->msgtype == 17))
    {
        if ((mm->errorbit = fixSingleBitErrors(msg,mm->msgbits)) != -1) {
            mm->crc = modesChecksum(msg,mm->msgbits);
            mm->crcok = 1;
        } else if (Modes.aggressive && mm->msgtype == 17 &&
                   (mm->errorbit = fixTwoBitsErrors(msg,mm->msgbits)) != -1)
        {
            mm->crc = modesChecksum(msg,mm->msgbits);
            mm->crcok = 1;
        }
    }

    /* Note that most of the other computation happens *after* we fix
     * the single bit errors, otherwise we would need to recompute the
     * fields again. */
    mm->ca = msg[0] & 7;        /* Responder capabilities. */

    /* ICAO address */
    mm->aa1 = msg[1];
    mm->aa2 = msg[2];
    mm->aa3 = msg[3];

    /* DF 17 type (assuming this is a DF17, otherwise not used) */
    mm->metype = msg[4] >> 3;   /* Extended squitter message type. */
    mm->mesub = msg[4] & 7;     /* Extended squitter message subtype. */

    /* Fields for DF4,5,20,21 */
    mm->fs = msg[0] & 7;        /* Flight status for DF4,5,20,21 */
    mm->dr = msg[1] >> 3 & 31;  /* Request extraction of downlink request. */
    mm->um = ((msg[1] & 7)<<3)| /* Request extraction of downlink request. */
              msg[2]>>5;

    /* In the squawk (identity) field bits are interleaved like that
     * (message bit 20 to bit 32):
     *
     * C1-A1-C2-A2-C4-A4-ZERO-B1-D1-B2-D2-B4-D4
     *
     * So every group of three bits A, B, C, D represent an integer
     * from 0 to 7.
     *
     * The actual meaning is just 4 octal numbers, but we convert it
     * into a base ten number tha happens to represent the four
     * octal numbers.
     *
     * For more info: http://en.wikipedia.org/wiki/Gillham_code */
    {
        int a,b,c,d;

        a = ((msg[3] & 0x80) >> 5) |
            ((msg[2] & 0x02) >> 0) |
            ((msg[2] & 0x08) >> 3);
        b = ((msg[3] & 0x02) << 1) |
            ((msg[3] & 0x08) >> 2) |
            ((msg[3] & 0x20) >> 5);
        c = ((msg[2] & 0x01) << 2) |
            ((msg[2] & 0x04) >> 1) |
            ((msg[2] & 0x10) >> 4);
        d = ((msg[3] & 0x01) << 2) |
            ((msg[3] & 0x04) >> 1) |
            ((msg[3] & 0x10) >> 4);
        mm->identity = a*1000 + b*100 + c*10 + d;
    }

    /* DF 11 & 17: try to populate our ICAO addresses whitelist.
     * DFs with an AP field (xored addr and crc), try to decode it. */
    if (mm->msgtype != 11 && mm->msgtype != 17) {
        /* Check if we can check the checksum for the Downlink Formats where
         * the checksum is xored with the aircraft ICAO address. We try to
         * brute force it using a list of recently seen aircraft addresses. */
        if (bruteForceAP(msg,mm)) {
            /* We recovered the message, mark the checksum as valid. */
            mm->crcok = 1;
        } else {
            mm->crcok = 0;
        }
    } else {
        /* If this is DF 11 or DF 17 and the checksum was ok,
         * we can add this address to the list of recently seen
         * addresses. */
        if (mm->crcok && mm->errorbit == -1) {
            uint32_t addr = (mm->aa1 << 16) | (mm->aa2 << 8) | mm->aa3;
            addRecentlySeenICAOAddr(addr);
        }
    }

    /* Decode 13 bit altitude for DF0, DF4, DF16, DF20 */
    if (mm->msgtype == 0 || mm->msgtype == 4 ||
        mm->msgtype == 16 || mm->msgtype == 20) {
        mm->altitude = decodeAC13Field(msg, &mm->unit);
    }

    /* Decode extended squitter specific stuff. */
    if (mm->msgtype == 17) {
        /* Decode the extended squitter message. */

        if (mm->metype >= 1 && mm->metype <= 4) {
            /* Aircraft Identification and Category */
            mm->aircraft_type = mm->metype-1;
            mm->flight[0] = ais_charset[msg[5]>>2];
            mm->flight[1] = ais_charset[((msg[5]&3)<<4)|(msg[6]>>4)];
            mm->flight[2] = ais_charset[((msg[6]&15)<<2)|(msg[7]>>6)];
            mm->flight[3] = ais_charset[msg[7]&63];
            mm->flight[4] = ais_charset[msg[8]>>2];
            mm->flight[5] = ais_charset[((msg[8]&3)<<4)|(msg[9]>>4)];
            mm->flight[6] = ais_charset[((msg[9]&15)<<2)|(msg[10]>>6)];
            mm->flight[7] = ais_charset[msg[10]&63];
            mm->flight[8] = '\0';
        } else if (mm->metype >= 9 && mm->metype <= 18) {
            /* Airborne position Message */
            mm->fflag = msg[6] & (1<<2);
            mm->tflag = msg[6] & (1<<3);
            mm->altitude = decodeAC12Field(msg,&mm->unit);
            mm->raw_latitude = ((msg[6] & 3) << 15) |
                                (msg[7] << 7) |
                                (msg[8] >> 1);
            mm->raw_longitude = ((msg[8]&1) << 16) |
                                 (msg[9] << 8) |
                                 msg[10];
        } else if (mm->metype == 19 && mm->mesub >= 1 && mm->mesub <= 4) {
            /* Airborne Velocity Message */
            if (mm->mesub == 1 || mm->mesub == 2) {
                mm->ew_dir = (msg[5]&4) >> 2;
                mm->ew_velocity = ((msg[5]&3) << 8) | msg[6];
                mm->ns_dir = (msg[7]&0x80) >> 7;
                mm->ns_velocity = ((msg[7]&0x7f) << 3) | ((msg[8]&0xe0) >> 5);
                mm->vert_rate_source = (msg[8]&0x10) >> 4;
                mm->vert_rate_sign = (msg[8]&0x8) >> 3;
                mm->vert_rate = ((msg[8]&7) << 6) | ((msg[9]&0xfc) >> 2);
                /* Compute velocity and angle from the two speed
                 * components. */
                mm->velocity = sqrt(mm->ns_velocity*mm->ns_velocity+
                                    mm->ew_velocity*mm->ew_velocity);
                if (mm->velocity) {
                    int ewv = mm->ew_velocity;
                    int nsv = mm->ns_velocity;
                    double heading;

                    if (mm->ew_dir) ewv *= -1;
                    if (mm->ns_dir) nsv *= -1;
                    heading = atan2(ewv,nsv);

                    /* Convert to degrees. */
                    mm->heading = heading * 360 / (M_PI*2);
                    /* We don't want negative values but a 0-360 scale. */
                    if (mm->heading < 0) mm->heading += 360;
                } else {
                    mm->heading = 0;
                }
            } else if (mm->mesub == 3 || mm->mesub == 4) {
                mm->heading_is_valid = msg[5] & (1<<2);
                mm->heading = (360.0/128) * (((msg[5] & 3) << 5) |
                                              (msg[6] >> 3));
            }
        }
    }
    mm->phase_corrected = 0; /* Set to 1 by the caller if needed. */
}


static uint32_t modes_checksum_table[112] = {
0x3935ea, 0x1c9af5, 0xf1b77e, 0x78dbbf, 0xc397db, 0x9e31e9, 0xb0e2f0, 0x587178,
0x2c38bc, 0x161c5e, 0x0b0e2f, 0xfa7d13, 0x82c48d, 0xbe9842, 0x5f4c21, 0xd05c14,
0x682e0a, 0x341705, 0xe5f186, 0x72f8c3, 0xc68665, 0x9cb936, 0x4e5c9b, 0xd8d449,
0x939020, 0x49c810, 0x24e408, 0x127204, 0x093902, 0x049c81, 0xfdb444, 0x7eda22,
0x3f6d11, 0xe04c8c, 0x702646, 0x381323, 0xe3f395, 0x8e03ce, 0x4701e7, 0xdc7af7,
0x91c77f, 0xb719bb, 0xa476d9, 0xadc168, 0x56e0b4, 0x2b705a, 0x15b82d, 0xf52612,
0x7a9309, 0xc2b380, 0x6159c0, 0x30ace0, 0x185670, 0x0c2b38, 0x06159c, 0x030ace,
0x018567, 0xff38b7, 0x80665f, 0xbfc92b, 0xa01e91, 0xaff54c, 0x57faa6, 0x2bfd53,
0xea04ad, 0x8af852, 0x457c29, 0xdd4410, 0x6ea208, 0x375104, 0x1ba882, 0x0dd441,
0xf91024, 0x7c8812, 0x3e4409, 0xe0d800, 0x706c00, 0x383600, 0x1c1b00, 0x0e0d80,
0x0706c0, 0x038360, 0x01c1b0, 0x00e0d8, 0x00706c, 0x003836, 0x001c1b, 0xfff409,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000,
0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000, 0x000000
};

int modesMessageLenByType(int type) {
    if (type == 16 || type == 17 ||
        type == 19 || type == 20 ||
        type == 21)
        return MODES_LONG_MSG_BITS;
    else
        return MODES_SHORT_MSG_BITS;
}


uint32_t modesChecksum(unsigned char *msg, int bits) {
    uint32_t crc = 0;
    int offset = (bits == 112) ? 0 : (112-56);
    int j;

    for(j = 0; j < bits; j++) {
        int byte = j/8;
        int bit = j%8;
        int bitmask = 1 << (7-bit);

        /* If bit is set, xor with corresponding table entry. */
        if (msg[byte] & bitmask)
            crc ^= modes_checksum_table[j+offset];
    }
    return crc; /* 24 bit checksum. */
}

void decodeModesMessage(struct modesMessage *mm, unsigned char *msg) {
    uint32_t crc2;   /* Computed CRC, used to verify the message CRC. */
    char *ais_charset = "?ABCDEFGHIJKLMNOPQRSTUVWXYZ????? ???????????????0123456789??????";

    /* Work on our local copy */
    memcpy(mm->msg,msg,MODES_LONG_MSG_BYTES);
    msg = mm->msg;

    /* Get the message type ASAP as other operations depend on this */
    mm->msgtype = msg[0]>>3;    /* Downlink Format */
    mm->msgbits = modesMessageLenByType(mm->msgtype);

    /* CRC is always the last three bytes. */
    mm->crc = ((uint32_t)msg[(mm->msgbits/8)-3] << 16) |
              ((uint32_t)msg[(mm->msgbits/8)-2] << 8) |
               (uint32_t)msg[(mm->msgbits/8)-1];
    crc2 = modesChecksum(msg,mm->msgbits);

    /* Check CRC and fix single bit errors using the CRC when
     * possible (DF 11 and 17). */
    mm->errorbit = -1;  /* No error */
    mm->crcok = (mm->crc == crc2);

    if (!mm->crcok)
    {
    	return;
    }

    HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_SET);
    return;
}


void computeMagnitudeVector(void) {
    uint32_t j;

    /* Compute the magnitudo vector. It's just SQRT(I^2 + Q^2), but
     * we rescale to the 0-255 range to exploit the full resolution. */
    for (j = 0; j < SIZE; j += 2) {
        int i = usbbuf[j]-127;
        int q = usbbuf[j+1]-127;

        if (i < 0) i = -i;
        if (q < 0) q = -q;
        magnitude[j/2] = maglut[i*129+q];
    }

}

void detectModeS(uint16_t *m, uint32_t mlen) {
    unsigned char bits[MODES_LONG_MSG_BITS];
    unsigned char msg[MODES_LONG_MSG_BITS/2];
    uint16_t aux[MODES_LONG_MSG_BITS*2];
    uint32_t j;
    int use_correction = 0;

    for (j = 0; j < mlen - MODES_FULL_LEN*2; j++) {
        int low, high, delta, i, errors;
        int good_message = 0;

        //if (use_correction) goto good_preamble; /* We already checked it. */

        /* First check of relations between the first 10 samples
         * representing a valid preamble. We don't even investigate further
         * if this simple test is not passed. */
        if (!(magnitude[j] > magnitude[j+1] &&
            magnitude[j+1] < magnitude[j+2] &&
            magnitude[j+2] > magnitude[j+3] &&
            magnitude[j+3] < magnitude[j] &&
            magnitude[j+4] < magnitude[j] &&
            magnitude[j+5] < magnitude[j] &&
            magnitude[j+6] < magnitude[j] &&
            magnitude[j+7] > magnitude[j+8] &&
            magnitude[j+8] < magnitude[j+9] &&
            magnitude[j+9] > magnitude[j+6]))
        {
        	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_SET);
            continue;
        }


        high = (magnitude[j]+magnitude[j+2]+magnitude[j+7]+magnitude[j+9])/6;
        if (magnitude[j+4] >= high ||
        		magnitude[j+5] >= high)
        {
        	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_SET);
        	continue;
        }

        if (magnitude[j+11] >= high ||
        		magnitude[j+12] >= high ||
				magnitude[j+13] >= high ||
				magnitude[j+14] >= high)
        {
        	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_SET);
        	continue;
        }

        errors = 0;
              for (int i = 0; i < MODES_LONG_MSG_BITS*2; i += 2) {
                  low = magnitude[j+i+MODES_PREAMBLE_US*2];
                  high = magnitude[j+i+MODES_PREAMBLE_US*2+1];
                  delta = low-high;
                  if (delta < 0) delta = -delta;

                  if (i > 0 && delta < 256) {
                      bits[i/2] = bits[i/2-1];
                  } else if (low == high) {
                      /* Checking if two adiacent samples have the same magnitude
                       * is an effective way to detect if it's just random noise
                       * that was detected as a valid preamble. */
                      bits[i/2] = 2; /* error */
                      if (i < MODES_SHORT_MSG_BITS*2) errors++;
                  } else if (low > high) {
                      bits[i/2] = 1;
                  } else {
                      /* (low < high) for exclusion  */
                      bits[i/2] = 0;
                  }
              }

              /* Pack bits into bytes */
              for (int i = 0; i < MODES_LONG_MSG_BITS; i += 8) {
                  msg[i/8] =
                      bits[i]<<7 |
                      bits[i+1]<<6 |
                      bits[i+2]<<5 |
                      bits[i+3]<<4 |
                      bits[i+4]<<3 |
                      bits[i+5]<<2 |
                      bits[i+6]<<1 |
                      bits[i+7];
              }

              int msgtype = msg[0]>>3;
              int msglen = modesMessageLenByType(msgtype)/8;

              delta = 0;
              for (i = 0; i < msglen*8*2; i += 2) {
                  delta += abs(magnitude[j+i+MODES_PREAMBLE_US*2]-
                		  magnitude[j+i+MODES_PREAMBLE_US*2+1]);
              }
              delta /= msglen*4;

              /* Filter for an average delta of three is small enough to let almost
               * every kind of message to pass, but high enough to filter some
               * random noise. */


              if (errors != 0 )
              {
            	  continue;
              }

              struct modesMessage mm;


              decodeModesMessage(&mm,msg);


    }
}

int fmradio_init() {

    dev = &static_dev;

    self.tuner_ppm_error = 0;
    self.tuner_frequency = 1090000000;
    self.adc_samp_rate = 2000000;
    self.is_raw_buf_complete = 0;

    memset(usbbuf,0,SIZE);
    memset(magnitude,0,SIZE);


       for (uint8_t i = 0; i <= 128; i++) {
           for (uint8_t q = 0; q <= 128; q++) {
               maglut[i*129+q] = round(sqrt(i*i+q*q)*360);
           }
       }


    int8_t dongle_open = rtlsdr_open(&dev, 0);

    if (dongle_open < 0) {
        //DEBUG_PRINT("Failed to open rtlsdr device (%i).\n", dongle_open);
        return dongle_open;
    } else {
        //DEBUG_PRINT("Opened rtlsdr\n");
    }

    r = verbose_auto_gain(dev);

    r = rtlsdr_set_freq_correction(dev, self.tuner_ppm_error);
    r = verbose_set_frequency(dev, self.tuner_frequency);


    // Set the sample rate
    r = verbose_set_sample_rate(dev, self.adc_samp_rate);

    // Reset endpoint before we start reading from it (mandatory)
    r = verbose_reset_buffer(dev);

    //DEBUG_PRINT("Starting user app\n");
    usbbuf[512] = 'a';
    // begin capture radio data
    self.is_usb_app_started = 1;
    rtlsdr_read_sync(dev, usbbuf, 8, 0);
    return 0;

}

void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif

  UNUSED(hhcd);
  UNUSED(chnum);

  if (!self.is_usb_app_started) { return; }

  if (urb_state == URB_DONE)
  {

	  computeMagnitudeVector();
	  detectModeS(magnitude,512);
	  rtlsdr_read_sync(dev, usbbuf, 8, 0);
  }
  else if(urb_state == URB_ERROR)
  {
	  //HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_13);
  }
}
/*
void fmradio_process() {

    // run init
    if (!self.is_usb_app_started) fmradio_init();

    // wait for raw buffer to fill completely
    if (!self.is_raw_buf_complete) return;

    // reset buffer completion flag
    self.is_raw_buf_complete = 0;

    // trace event
    trace_itm_print(3,0);

    // demodulate and downsample the completed raw buffer
    uint32_t demod_index = 0;
    volatile uint8_t* raw_buf_complete = (raw_buf_filling == raw_bufA) ? raw_bufB : raw_bufA;

    for (uint32_t sample_index = 0;
            (sample_index + (2 * DOWNSAMPLE) + 3) < RAW_BUFFER_BYTES;
            sample_index += 2 * DOWNSAMPLE) {

        // todo reconsider -127 offset as samples are actually only 7-bit reso
        int16_t s1[2], s2[2];
        s1[0] = (int16_t)raw_buf_complete[sample_index + 0] - 127; // I
        s1[1] = (int16_t)raw_buf_complete[sample_index + 1] - 127; // Q
        s2[0] = (int16_t)raw_buf_complete[sample_index + 2] - 127; // I
        s2[1] = (int16_t)raw_buf_complete[sample_index + 3] - 127; // Q

        // find the phase shift in these two samples (this is the essence of the FM demod)
        int16_t pcm = fmradio_polar_disc(s2[0], s2[1], s1[0], s1[1]);

        pcm = pcm * 8.0f / PI; // scale from radians

        // TODO: dc block filter and low pass filter

        // note: audio codec currently expects stereo sample buffer
        curr_demod_buff[demod_index++] = pcm; // right channel
        curr_demod_buff[demod_index++] = pcm; // left channel

    }

    // play demodulated buffer
    audio_set_next_segment((int16_t*)curr_demod_buff, 2*demod_index);

    // swap demod buffers
    curr_demod_buff = (curr_demod_buff == demod_bufferA) ? demod_bufferB : demod_bufferA;

}*/
