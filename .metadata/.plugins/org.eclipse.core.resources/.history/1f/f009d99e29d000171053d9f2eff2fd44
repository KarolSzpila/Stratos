/*
 * Airplaine.cpp
 *
 *  Created on: 29.10.2017
 *      Author: Karol
 */

#include <AircraftRecord.h>

AircraftRecord::AircraftRecord(const std::string& ICAO_Address) : ICAO_Address(ICAO_Address)
{
	ticksToExpire = DEFAULT_LIVE_SPAN;
	recordExpiered = false;
	altitudeKnown = false;
	flightNameKnown = false;
	oddCprValid = false;
	evenCprValid = false;
}

void AircraftRecord::Tick(uint32_t ticks)
{
	if(oddCprValid == true)
	{
		oddCprTime += ticks;
	}
	if(evenCprValid == true)
	{
		evenCprTime += ticks;
	}
	if(ticksToExpire > 0U)
	{
		if(ticksToExpire > ticks)
		{
			ticksToExpire -= ticks;
		}
		else
		{
			ticksToExpire = 0U;
		}
		if(ticksToExpire == 0U)
		{
			recordExpiered = true;
		}

	}
}

void AircraftRecord::SetAltitude(const uint32_t& newAltitude)
{
	char buff[256];
	sprintf(buff,"%lu ft",newAltitude);
	altStr = std::string(buff);
	altitude = newAltitude;
	altitudeKnown = true;
	ticksToExpire = DEFAULT_LIVE_SPAN;
}
void AircraftRecord::SetFlightName(const std::string& newFlightName)
{
	flightName = newFlightName;
	flightNameKnown = true;
	ticksToExpire = DEFAULT_LIVE_SPAN;
}

void AircraftRecord::SetOddCpr(int oddCprLat,int oddCprLon)
{
	this->oddCprLat = oddCprLat;
	this->oddCprLon = oddCprLon;
	oddCprValid = true;
	oddCprTime = 0U;

}
void AircraftRecord::SetEvenCpr(int evenCprLat,int evenCprLon)
{
	this->evenCprLat = evenCprLat;
	this->evenCprLon = evenCprLon;
	evenCprValid = true;
	evenCprTime = 0U;
}

void AircraftRecord::decodeCPR() {
    const double AirDlat0 = 360.0 / 60;
    const double AirDlat1 = 360.0 / 59;
    double lat0 = a->even_cprlat;
    double lat1 = a->odd_cprlat;
    double lon0 = a->even_cprlon;
    double lon1 = a->odd_cprlon;

    /* Compute the Latitude Index "j" */
    int j = floor(((59*lat0 - 60*lat1) / 131072) + 0.5);
    double rlat0 = AirDlat0 * (cprModFunction(j,60) + lat0 / 131072);
    double rlat1 = AirDlat1 * (cprModFunction(j,59) + lat1 / 131072);

    if (rlat0 >= 270) rlat0 -= 360;
    if (rlat1 >= 270) rlat1 -= 360;

    /* Check that both are in the same latitude zone, or abort. */
    if (cprNLFunction(rlat0) != cprNLFunction(rlat1)) return;

    /* Compute ni and the longitude index m */
    if (evenCprTime > oddCprTime) {
        /* Use even packet. */
        int ni = cprNFunction(rlat0,0);
        int m = floor((((lon0 * (cprNLFunction(rlat0)-1)) -
                        (lon1 * cprNLFunction(rlat0))) / 131072) + 0.5);
        lognitude= cprDlonFunction(rlat0,0) * (cprModFunction(m,ni)+lon0/131072);
        latitude = rlat0;
    } else {
        /* Use odd packet. */
        int ni = cprNFunction(rlat1,1);
        int m = floor((((lon0 * (cprNLFunction(rlat1)-1)) -
                        (lon1 * cprNLFunction(rlat1))) / 131072.0) + 0.5);
        lognitude = cprDlonFunction(rlat1,1) * (cprModFunction(m,ni)+lon1/131072);
        latitude = rlat1;
    }
    if (latitude > 180) latitude -= 360;
}


