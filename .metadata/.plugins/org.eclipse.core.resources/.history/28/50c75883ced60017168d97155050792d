/*********************************************************************
*                                                                    *
*                SEGGER Microcontroller GmbH & Co. KG                *
*        Solutions for real time microcontroller applications        *
*                                                                    *
**********************************************************************
*                                                                    *
* C-file generated by:                                               *
*                                                                    *
*        GUI_Builder for emWin version 5.40                          *
*        Compiled Jun 22 2017, 10:13:26                              *
*        (c) 2017 Segger Microcontroller GmbH & Co. KG               *
*                                                                    *
**********************************************************************
*                                                                    *
*        Internet: www.segger.com  Support: support@segger.com       *
*                                                                    *
**********************************************************************
*/

// USER START (Optionally insert additional includes)
// USER END



/*********************************************************************
*
*       Defines
*
**********************************************************************
*/
#define ID_WINDOW_0 (GUI_ID_USER + 0x00)
#define ID_LISTVIEW_0 (GUI_ID_USER + 0x01)
#define ID_IMAGE_0 (GUI_ID_USER + 0x02)
#define ID_LISTVIEW_1 (GUI_ID_USER + 0x03)
#define ID_SCROLLBAR_0 (GUI_ID_USER + 0x04)

#define ID_IMAGE_0_IMAGE_0  0x00
#include "DIALOG.h"
#include "string"
#include "FlightCotrolView.h"
#include "cmath"
#include "MESSAGEBOX.h"

// USER START (Optionally insert additional defines)
// USER END

/*********************************************************************
*
*       Static data
*
**********************************************************************
*/
/*********************************************************************
*
*       _acImage_0, "C:\Users\Karol\Desktop\radar2test.jpg", ID_IMAGE_0_IMAGE_0
*/

#define xCenter 307
#define yCenter 301
#define yOffset 300
WM_HWIN aircraftsLitView;
WM_HWIN radarImage;
WM_HWIN radar;
WM_HWIN statisticListView;
std::list<AircraftRecord>* pAircrafts = NULL;
//extern const U8 _acImage_0[76390];

/*
GUI_CONST_STORAGE GUI_BITMAP bmbig_airplain = {
  120, // xSize
  120, // ySize
  480, // BytesPerLine
  32, // BitsPerPixel
  (unsigned char *)_acbig_airplain,  // Pointer to picture data
  NULL,  // Pointer to palette
  GUI_DRAW_BMP8888
};
*/
char b[64];
int count = 0;

void DisplayAircraft(const AircraftRecord& record)
{
	const float NmPerPixel = 180.0F/520.0;
	float latDiff = (latRef - record.GetLat()) * 60.0F;
	float lonDiff = (lonRef - record.GetLon()) * -60.0F;

	int x = lonDiff/NmPerPixel + xCenter;
	int y = latDiff/NmPerPixel + yCenter;
	GUI_SetColor(0x1594bf);
	GUI_DrawCircle(x,y ,3);
	GUI_DispStringAt(record.GetICAO_Address().c_str(), x, y - 12 );

}

void DrawRadar()
{


}
void cbImage(WM_MESSAGE * pMsg)
{
	switch (pMsg->MsgId){

	  case WM_PAINT:
	  {

		//IMAGE_Callback(pMsg);
		GUI_SetColor(0x3ae635);
		GUI_SetBkColor(GUI_BLACK);
		GUI_DrawCircle(307,301,1);
		GUI_DrawCircle(307,301,88);
		GUI_DrawCircle(307,301,88*2);
		GUI_DrawCircle(307,301,88*3);
		sprintf(b,"60 Nm");
		GUI_DispStringAt(b, 363, 297);
		sprintf(b,"90 Nm");
		GUI_DispStringAt(b, 451, 297);
		sprintf(b,"180 Nm");
		GUI_DispStringAt(b, 539 - 6, 297);
		float x = 0.0;
		float y = -(264.0 + 15);

		for(int i = 0; i < 360; i+=10)
		{
	        float deg = i * M_PI/180.0;
	        float x1 = x*std::cos(deg) - y*std::sin(deg);
	        float y1 = y*std::cos(deg) + x*std::sin(deg);
			sprintf(b,"%d°",i);
			GUI_DispStringAt(b, x1 + xCenter - 9,y1 + yCenter -4);
		}
		if(pAircrafts != NULL)
			{
				for(auto it = pAircrafts->begin(); it != pAircrafts->end(); it++)
				{
					if((it->altitudeKnown == true) && (it->velocityAndHeadingKnown == true))
					{
						DisplayAircraft(*it);
					}
				}
			}
	  }
	    break;
	  default:
	    //
	    // Any messages not handled in this callback are passed to the default callback function
	    //
	    WM_DefaultProc(pMsg);
	    break;
	  }
}


void cbWin(WM_MESSAGE * pMsg)
{
	switch (pMsg->MsgId){

	  case WM_PAINT:
	  {

		  MESSAGEBOX_Callback(pMsg);
		  /*
			GUI_SetColor(0x3ae635);
			GUI_SetBkColor(GUI_BLACK);
			GUI_SetFont(GUI_FONT_8X16);
		  GUI_RECT pRect;
		  WM_GetClientRectEx(pMsg->hWin,&pRect);

		  GUI__DispStringInRect("SDR device not found",&pRect,GUI_TA_HCENTER | GUI_TA_VCENTER,50);
		  */
		  WM_DefaultProc(pMsg);
	  }
	    break;
	  default:
	    //
	    // Any messages not handled in this callback are passed to the default callback function
	    //
	    WM_DefaultProc(pMsg);
	    break;
	  }
}

// USER START (Optionally insert additional static data)
// USER END

/*********************************************************************
*
*       _aDialogCreate
*/
static const GUI_WIDGET_CREATE_INFO _aDialogCreate[] = {
  { WINDOW_CreateIndirect, "Window", ID_WINDOW_0, 0, 0, 1024, 600, 0, 0x0, 0 },
  { LISTVIEW_CreateIndirect, "Listview", ID_LISTVIEW_0, 608, 0, 404, 600, 0, 0x0, 0 },
  //{ LISTVIEW_CreateIndirect, "Listview1", ID_LISTVIEW_1, 620, 550, 404, 50, 0, 0x0, 0 },
  { SCROLLBAR_CreateIndirect, "Scrollbar", ID_SCROLLBAR_0, 1012, 0, 12, 600, 8, 0x0, 0 },
  { IMAGE_CreateIndirect, "Image", ID_IMAGE_0, 0, 0, 608, 600, 0, 0, 0 },
  // USER START (Optionally insert additional widgets)
  // USER END
};

static const GUI_WIDGET_CREATE_INFO _aDialogCreate2[] = {
  //{ WINDOW_CreateIndirect, "Window", ID_WINDOW_1, 0, 0, 1024, 600, WM_CF_HASTRANS, 0x0, 0 },
 // { IMAGE_CreateIndirect, "Image", ID_IMAGE_1, 0, 0, 620, 600, 0, 0, 0 },
  // USER START (Optionally insert additional widgets)
  // USER END
};

/*********************************************************************
*
*       Static code
*
**********************************************************************
*/
/*********************************************************************
*
*       _GetImageById
*/
static const void * _GetImageById(U32 Id, U32 * pSize) {
  switch (Id) {
  case ID_IMAGE_0_IMAGE_0:;
  //  *pSize = sizeof(_acImage_0);
   // return (const void *)_acImage_0;
  }
  return NULL;
}

// USER START (Optionally insert additional static code)
// USER END

/*********************************************************************
*
*       _cbDialog
*/

#include "MESSAGEBOX.h"
WM_HWIN hWin0;
void DialogCallback(WM_MESSAGE * pMsg)  {
  const void * pData;
  WM_HWIN      hItem;
  U32          FileSize;
  int          NCode;
  int          Id;
  // USER START (Optionally insert additional variables)
  // USER END

  switch (pMsg->MsgId) {
  case WM_INIT_DIALOG:
  {
    //
    // Initialization of 'Listview'
    //

	hItem = pMsg->hWin;
	WINDOW_SetBkColor(hItem, GUI_MAKE_COLOR(0x00000000));


    hItem = WM_GetDialogItem(pMsg->hWin, ID_LISTVIEW_0);
    aircraftsLitView = hItem;
    HEADER_SetTextColor(LISTVIEW_GetHeader(aircraftsLitView),0x3ae635);
    //HEADER_SetBkColor(LISTVIEW_GetHeader(aircraftsLitView),0x3ae635);
    LISTVIEW_SetBkColor(aircraftsLitView,LISTVIEW_CI_UNSEL,0x000000);
    //LISTVIEW_SetTextColor(aircraftsLitView,LISTVIEW_CI_UNSEL,0x3ae635);
    WIDGET_SetEffect(aircraftsLitView,&WIDGET_Effect_Simple);




    LISTVIEW_AddColumn(hItem, 60, "ICAO Addr", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_SetGridVis(hItem, 1);

    LISTVIEW_AddColumn(hItem, 60, "Altitide", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddColumn(hItem, 124, "Position", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddColumn(hItem, 50, "Velocity", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddColumn(hItem, 50, "Heading", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddColumn(hItem, 60, "Flight name", GUI_TA_HCENTER | GUI_TA_VCENTER);
    //WM_SetCallback(LISTVIEW_GetHeader(aircraftsLitView),cbList);

    hItem = WM_GetDialogItem(pMsg->hWin, ID_LISTVIEW_1);
   // statisticListView = hItem;
    //LISTVIEW_SetBkColor(statisticListView,LISTVIEW_CI_UNSEL,0x000000);
   // LISTVIEW_SetTextColor(statisticListView,LISTVIEW_CI_UNSEL,0x3ae635);


    //HEADER_SetTextColor(LISTVIEW_GetHeader(statisticListView),0x3ae635);
    //HEADER_SetBkColor(LISTVIEW_GetHeader(statisticListView),0x000000);
    //HEADER_SetHeight(LISTVIEW_GetHeader(statisticListView), HEADER_GetHeight(LISTVIEW_GetHeader(statisticListView)) + 15);

    /*
    LISTVIEW_AddColumn(hItem, 81, "ADS-B \n Recived", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_SetGridVis(hItem, 1);
    LISTVIEW_AddColumn(hItem, 81, "Velocity \n msg", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddColumn(hItem, 81, "Position \n odd msg", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddColumn(hItem, 81, "Position \n even msg", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddColumn(hItem, 80, "Identity \n msg", GUI_TA_HCENTER | GUI_TA_VCENTER);
    LISTVIEW_AddRow(hItem,NULL);
    for(uint8_t i = 0; i < 6; i++)
    {

    LISTVIEW_SetItemText(hItem,i,0,"0");
    }
	*/

    hItem = WM_GetDialogItem(pMsg->hWin, ID_IMAGE_0);
    radarImage = hItem;
    WM_SetCallback(radarImage,cbImage);

    std::string title("   SDR device\nnot found   ");


    FRAMEWIN_SetDefaultFont(GUI_FONT_8X16);
    WM_HWIN hBox = MESSAGEBOX_Create(title.c_str(),
                           	"     Warning     ", GUI_MESSAGEBOX_CF_MODAL);
    FRAMEWIN_SetFont(hBox,GUI_FONT_8X16);
    FRAMEWIN_SetTextAlign(hBox,GUI_TA_HCENTER | GUI_TA_VCENTER);
    FRAMEWIN_SetClientColor(hBox,GUI_BLACK);
    WM_HWIN hBoxText = WM_GetDialogItem(hBox,GUI_ID_OK);


    BUTTON_SetBkColor(hBoxText,BUTTON_CI_UNPRESSED,GUI_TRANSPARENT);
    BUTTON_SetTextColor(hBoxText,BUTTON_CI_UNPRESSED,0x3ae635);
    BUTTON_SetFrameColor(hBoxText,GUI_TRANSPARENT);
    BUTTON_SetFont(hBoxText,GUI_FONT_8X16);
    BUTTON_SetText(hBoxText,"");
    WIDGET_SetEffect(hBoxText,&WIDGET_Effect_None);


    WM_HWIN hBoxTextt = WM_GetDialogItem(hBox,GUI_ID_TEXT0);
    TEXT_SetFont(hBoxTextt,GUI_FONT_8X13_1);
    TEXT_SetTextColor(hBoxTextt,0x3ae635);
   // TEXT_SetBkColor(hBoxTextt,GUI_BLACK);
   // TEXT_SetText(hBoxTextt,"\nSDR device not found");

    // USER END
  }
    break;
  case WM_NOTIFY_PARENT:
    Id    = WM_GetId(pMsg->hWinSrc);
    NCode = pMsg->Data.v;
    switch(Id) {
        case ID_LISTVIEW_0: // Notifications sent by 'Listview'
          switch(NCode) {
          case WM_NOTIFICATION_CLICKED:
            // USER START (Optionally insert code for reacting on notification message)
            // USER END
            break;
          case WM_NOTIFICATION_RELEASED:
            // USER START (Optionally insert code for reacting on notification message)
            // USER END
            break;
          case WM_NOTIFICATION_SEL_CHANGED:
            // USER START (Optionally insert code for reacting on notification message)
            // USER END
            break;
          // USER START (Optionally insert additional code for further notification handling)
          // USER END
          }
          break;
          case ID_SCROLLBAR_0: // Notifications sent by 'Scrollbar'
               switch(NCode) {
               case WM_NOTIFICATION_CLICKED:
                 // USER START (Optionally insert code for reacting on notification message)
                 // USER END
                 break;
               case WM_NOTIFICATION_RELEASED:
                 // USER START (Optionally insert code for reacting on notification message)
                 // USER END
                 break;
               case WM_NOTIFICATION_VALUE_CHANGED:
                 // USER START (Optionally insert code for reacting on notification message)
                 // USER END
                 break;
               // USER START (Optionally insert additional code for further notification handling)
               // USER END
               }
               break;
             // USER START (Optionally insert additional code for further Ids)
             // USER END
             }
             break;
           // USER START (Optionally insert additional message handling)
           // USER END
      default:
        WM_DefaultProc(pMsg);
        break;
      }
}





WM_HWIN CreateWindow(void) {
	  //FRAMEWIN_SetDefaultSkinClassic();
	  //HEADER_SetDefaultSkinClassic();
	WIDGET_EFFECT_Simple_SetColor(0,0x3ae635);
	BUTTON_SetDefaultSkinClassic();
	HEADER_SKINFLEX_PROPS props;

	props.aColorFrame[0] = 0x3ae635;
	props.aColorFrame[1] = GUI_TRANSPARENT;
	props.aColorUpper[0] = 0x0c0c0c;
	props.aColorUpper[1] = 0x131313;
	props.aColorLower[0] = 0x202020;
	props.aColorLower[1] = 0x2f2f2f;
	HEADER_SetSkinFlexProps(&props,0);

	SCROLLBAR_SKINFLEX_PROPS propScroll;

	propScroll.aColorFrame[0] = 0x3ae635;
	propScroll.aColorFrame[1] = 0xc4c09;
	propScroll.aColorFrame[2] = 0xc4c09;
	propScroll.aColorUpper[0] = 0x202020;
	propScroll.aColorUpper[1] = 0x2f2f2f;
	propScroll.aColorLower[0] = 0x0c0c0c;
	propScroll.aColorLower[1] = 0x131313;
	propScroll.aColorShaft[0] = 0x101010;
	propScroll.aColorShaft[1] = 0x1e1e1e;
	propScroll.ColorArrow = 0x3ae635;
	propScroll.ColorGrasp = 0x3ae635;
	SCROLLBAR_SetSkinFlexProps(&propScroll,SCROLLBAR_SKINFLEX_PI_UNPRESSED);

	FRAMEWIN_SetDefaultTextColor(0,0x3ae635);
	FRAMEWIN_SKINFLEX_PROPS propsFrame;
	propsFrame.aColorFrame[0] = 0x3ae635;
	propsFrame.aColorFrame[1] = 0x1aa415;
	propsFrame.aColorFrame[2] = GUI_BLACK;
	propsFrame.aColorTitle[0] = 0x0c0c0c;
	propsFrame.aColorTitle[1] = 0x2f2f2f;
	propsFrame.BorderSizeB = 0;
	propsFrame.BorderSizeL = 0;
	propsFrame.BorderSizeR = 0;
	propsFrame.BorderSizeT = 0;
	propsFrame.SpaceX = 0;
	propsFrame.Radius = 0;
	FRAMEWIN_SetSkinFlexProps(&propsFrame,1);


	WM_HWIN hWin;
  WM_MULTIBUF_Enable(1);
  LISTVIEW_SetDefaultGridColor(0xc4c09);
  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), DialogCallback, WM_GetDesktopWindowEx(0), 0, 0);
  //hWin0 = GUI_CreateDialogBox(_aDialogCreate2, GUI_COUNTOF(_aDialogCreate2), DialogCallback2, WM_GetDesktopWindowEx(1), 0, 0);

  //hWin0 = WM_CreateWindowAsChild( 0, 300, 1024, 900,WM_GetDesktopWindowEx(0), WM_CF_SHOW | WM_CF_HASTRANS, cbWin, 0);
  return hWin;
}

// USER START (Optionally insert additional public code)
// USER END

/*************************** End of file ****************************/


FlightCotrolView::FlightCotrolView()
{
	rows = 0;

}

void FlightCotrolView::Init()
{
	GUI_Init();
	CreateWindow();


}
/*
char buffstat[64];
void FlightCotrolView::UpdateStats(const ADS_BMessage& msg)
{
	LISTVIEW_AddRow(statisticListView,NULL);
	 static uint32_t adsb_rec = 0;
	 static uint32_t vel_rec = 0;
	 static uint32_t id_rec = 0;
	 static uint32_t pos_odd = 0;
	 static uint32_t pos_even = 0;
	 static uint32_t bad_crc = 0;

	 std::string a("test");
	 if(!msg.crcok)
	 {
		 return;
	 }
	 switch(msg.msgtype)
	 {
	 case 17:
		 sprintf(buffstat,"%lu",++adsb_rec);
		 LISTVIEW_SetItemText(statisticListView,0,0,buffstat);
		 if (msg.metype >= 1 && msg.metype <= 4)
		 {
			 sprintf(buffstat,"%lu",++id_rec);
			 LISTVIEW_SetItemText(statisticListView,4,0,buffstat);
		 }
		 else if(msg.metype >= 9 && msg.metype <= 18)
		 {
			 if(msg.fflag == 0)
			 {
				 sprintf(buffstat,"%lu",++pos_odd);
				 LISTVIEW_SetItemText(statisticListView,3,0,buffstat);
			 }
			 else
			 {
				 sprintf(buffstat,"%lu",++pos_even);
				 LISTVIEW_SetItemText(statisticListView,2,0,buffstat);
			 }
		 }
		 else if(msg.metype == 19 && msg.mesub >= 1 && msg.mesub <= 4)
		 {
			 sprintf(buffstat,"%lu",++vel_rec);
			 LISTVIEW_SetItemText(statisticListView,1,0,buffstat);
		 }
		 break;
	 }
}
*/
void FlightCotrolView::Update(const std::list<AircraftRecord>& aircrafts)
{
	LISTVIEW_DeleteAllRows(aircraftsLitView);
	uint16_t cur_row = 0;
	for(auto it = aircrafts.begin(); it != aircrafts.end(); it++)
	{
		const AircraftRecord& currentRecord = *it;
		GUI_ConstString ICAO_AsCString = currentRecord.GetICAO_Address().c_str();
		LISTVIEW_AddRow(aircraftsLitView,&ICAO_AsCString);
		for(uint8_t i = 1; i < 5; i++)
		{
			LISTVIEW_SetItemText(aircraftsLitView,i,cur_row,"");
		}

		if(currentRecord.altitudeKnown == true)
		{
			LISTVIEW_SetItemText(aircraftsLitView,1,cur_row,currentRecord.altStr.c_str());
			LISTVIEW_SetItemText(aircraftsLitView,2,cur_row,currentRecord.positionStr.c_str());
		}

		if(currentRecord.velocityAndHeadingKnown == true)
		{
			LISTVIEW_SetItemText(aircraftsLitView,3,cur_row,currentRecord.velocityStr.c_str());
			LISTVIEW_SetItemText(aircraftsLitView,4,cur_row,currentRecord.headStr.c_str());

		}
		if(currentRecord.flightNameKnown == true)
		{
			LISTVIEW_SetItemText(aircraftsLitView,5,cur_row,currentRecord.GetFlightName().c_str());
		}
		cur_row++;
	}

	pAircrafts = &(const_cast<std::list<AircraftRecord>&>(aircrafts));

}

void FlightCotrolView::UpdateRadar()
{
	GUI_RECT rec = { 0,0 , 620, 600};
	WM_InvalidateRect(radarImage,&rec);
	/*
	WM_MESSAGE msg;
	msg.MsgId = WM_PAINT;
	//pAircrafts = &const_cast<std::list<AircraftRecord>&>(aircrafts);
	WM_SendMessage(radarImage,&msg);
	*/
}
